// This relabelling processor adds the "env" label to all metrics. Any metrics
// having the "invalid" default value assigned must be fixed by injecting the
// desired ENVIRONMENT env var into the Alloy process. All metrics are forwarded
// to the remote write processor below.
prometheus.relabel "set_env" {
	rule {
		action       = "replace"
		target_label = "env"
		replacement  = coalesce(sys.env("ENVIRONMENT"), "invalid")
	}

	forward_to = [prometheus.relabel.fix_env.receiver]
}

// This relabelling processor rewrites some values of the "env" label to match
// our environment conventions. NOTE that this processor should be temporary.
// As soon as those environment conventions are streamlined across the stack, we
// can drop the rules below.
//
//     dev     ->    testing
//     beta    ->    staging
//
prometheus.relabel "fix_env" {
	rule {
		action        = "replace"
		source_labels = ["env"]
		regex         = "dev"
		replacement   = "testing"
		target_label  = "env"
	}

	rule {
		action        = "replace"
		source_labels = ["env"]
		regex         = "beta"
		replacement   = "staging"
		target_label  = "env"
	}

	forward_to = [prometheus.relabel.remove_labels.receiver]
}

// Remove extraneous labels that may be added by certain exporters/jobs. E.g.
// CloudWatch specific labels may increase label cardinality for no reason, so
// we try to reduce costs.
prometheus.relabel "remove_labels" {
	rule {
		action        = "replace"
		source_labels = ["job", "name"]
		separator     = ";"
		regex         = "integrations/cloudwatch;(.*)"
		replacement   = ""
		target_label  = "name"
	}

	rule {
		action        = "replace"
		source_labels = ["job", "account_alias"]
		separator     = ";"
		regex         = "integrations/cloudwatch;(.*)"
		replacement   = ""
		target_label  = "account_alias"
	}

	rule {
		action        = "replace"
		source_labels = ["job", "region"]
		separator     = ";"
		regex         = "integrations/cloudwatch;(.*)"
		replacement   = ""
		target_label  = "region"
	}

	forward_to = [prometheus.relabel.create_labels.receiver]
}

// Create labels based on regular expressions to make it easier for certain
// dashboard queries. E.g. provide consistent service labels for our software
// components: server, worker, alloy, etc.
prometheus.relabel "create_labels" {
	rule {
		action        = "replace"
		source_labels = ["dimension_ServiceName"]
		regex         = ".*"
		replacement   = "server"
		target_label  = "service"
	}

	rule {
		action        = "replace"
		source_labels = ["dimension_ServiceName"]
		regex         = ".*-alloy$"
		replacement   = "alloy"
		target_label  = "service"
	}

	rule {
		action        = "replace"
		source_labels = ["dimension_ServiceName"]
		regex         = ".*-graphql$"
		replacement   = "graphql"
		target_label  = "service"
	}

	rule {
		action        = "replace"
		source_labels = ["dimension_ServiceName"]
		regex         = ".*otel-collector.*"
		replacement   = "otel-collector"
		target_label  = "service"
	}

	rule {
		action        = "replace"
		source_labels = ["dimension_ServiceName"]
		regex         = ".*worker.*"
		replacement   = "worker"
		target_label  = "service"
	}

	forward_to = [prometheus.remote_write.grafana_cloud.receiver]
}
